//对NULL指针的解引用操作
void test() 
{
	int *p = (int *)malloc(INT_MAX / 4);  
	*p = 20;//如果p的值是NULL，就会出现错误  
	free(p); 
} 
int main()
{ 
	test();  
	while (1); 
	return 0;
}

//对动态开辟空间的越界访问
void test() 
{
	int i = 0;  
	int *p = (int *)malloc(10 * sizeof(int));  //开辟空间为10个整形，即40个字节，地址是从0到9
	if (NULL == p)  
	{ 
		exit(EXIT_FAILURE); 
	}  
	for (i = 0; i <= 10; i++)  
	{
		*(p + i) = i;//当i是10的时候越界访问  
	}  
	free(p); 
}
int main()
{ 
	test();  
	while (1); 
	return 0;
}

//对非动态开辟内存进行free释放
void test() 
{
	int a = 10;  
	int *p = &a;  
	free(p);//对没有进行动态开辟的内存进行释放发生错误 
}
int main()
{ 
	test();  
	while (1); 
	return 0;
}

//使用free释放一块动态开辟内存的一部分
void test() 
{
	int *p = (int *)malloc(100);  
	p++;//p指向的起始位置发生改变
	free(p);//p不再指向动态内存的起始位置 
}
int main()
{
	test();
	while (1);
	return 0;
}

//对同一块动态内存多次释放
void test() 
{
	int *p = (int *)malloc(100);  
	free(p);  
	free(p);//重复释放 
}
int main()
{
	test();
	while (1);
	return 0;
}

//动态开辟内存忘记释放（内存泄漏）
void test() 
{ 
	int *p = (int *)malloc(100);  
	if (NULL != p)  
	{ 
		*p = 20; 
	} 
}
int main()
{
	test();//函数结束忘记释放动态开辟内存
	while (1);
	return 0;
}
